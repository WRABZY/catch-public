// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.31.1
// source: metrics/metrics.proto

package metrics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CatchMetricsClient is the client API for CatchMetrics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatchMetricsClient interface {
	GetNumberOfActiveUsers(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*MetricsReply, error)
	GetGameBooferSize(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*MetricsReply, error)
	GetGameBooferGamesAvailable(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*MetricsReply, error)
}

type catchMetricsClient struct {
	cc grpc.ClientConnInterface
}

func NewCatchMetricsClient(cc grpc.ClientConnInterface) CatchMetricsClient {
	return &catchMetricsClient{cc}
}

func (c *catchMetricsClient) GetNumberOfActiveUsers(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*MetricsReply, error) {
	out := new(MetricsReply)
	err := c.cc.Invoke(ctx, "/metrics.CatchMetrics/GetNumberOfActiveUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catchMetricsClient) GetGameBooferSize(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*MetricsReply, error) {
	out := new(MetricsReply)
	err := c.cc.Invoke(ctx, "/metrics.CatchMetrics/GetGameBooferSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catchMetricsClient) GetGameBooferGamesAvailable(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*MetricsReply, error) {
	out := new(MetricsReply)
	err := c.cc.Invoke(ctx, "/metrics.CatchMetrics/GetGameBooferGamesAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatchMetricsServer is the server API for CatchMetrics service.
// All implementations must embed UnimplementedCatchMetricsServer
// for forward compatibility
type CatchMetricsServer interface {
	GetNumberOfActiveUsers(context.Context, *GetRequest) (*MetricsReply, error)
	GetGameBooferSize(context.Context, *GetRequest) (*MetricsReply, error)
	GetGameBooferGamesAvailable(context.Context, *GetRequest) (*MetricsReply, error)
	mustEmbedUnimplementedCatchMetricsServer()
}

// UnimplementedCatchMetricsServer must be embedded to have forward compatible implementations.
type UnimplementedCatchMetricsServer struct {
}

func (UnimplementedCatchMetricsServer) GetNumberOfActiveUsers(context.Context, *GetRequest) (*MetricsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumberOfActiveUsers not implemented")
}
func (UnimplementedCatchMetricsServer) GetGameBooferSize(context.Context, *GetRequest) (*MetricsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameBooferSize not implemented")
}
func (UnimplementedCatchMetricsServer) GetGameBooferGamesAvailable(context.Context, *GetRequest) (*MetricsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameBooferGamesAvailable not implemented")
}
func (UnimplementedCatchMetricsServer) mustEmbedUnimplementedCatchMetricsServer() {}

// UnsafeCatchMetricsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatchMetricsServer will
// result in compilation errors.
type UnsafeCatchMetricsServer interface {
	mustEmbedUnimplementedCatchMetricsServer()
}

func RegisterCatchMetricsServer(s grpc.ServiceRegistrar, srv CatchMetricsServer) {
	s.RegisterService(&CatchMetrics_ServiceDesc, srv)
}

func _CatchMetrics_GetNumberOfActiveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatchMetricsServer).GetNumberOfActiveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics.CatchMetrics/GetNumberOfActiveUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatchMetricsServer).GetNumberOfActiveUsers(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatchMetrics_GetGameBooferSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatchMetricsServer).GetGameBooferSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics.CatchMetrics/GetGameBooferSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatchMetricsServer).GetGameBooferSize(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatchMetrics_GetGameBooferGamesAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatchMetricsServer).GetGameBooferGamesAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics.CatchMetrics/GetGameBooferGamesAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatchMetricsServer).GetGameBooferGamesAvailable(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CatchMetrics_ServiceDesc is the grpc.ServiceDesc for CatchMetrics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatchMetrics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metrics.CatchMetrics",
	HandlerType: (*CatchMetricsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNumberOfActiveUsers",
			Handler:    _CatchMetrics_GetNumberOfActiveUsers_Handler,
		},
		{
			MethodName: "GetGameBooferSize",
			Handler:    _CatchMetrics_GetGameBooferSize_Handler,
		},
		{
			MethodName: "GetGameBooferGamesAvailable",
			Handler:    _CatchMetrics_GetGameBooferGamesAvailable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metrics/metrics.proto",
}
